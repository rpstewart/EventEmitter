{"ts":1351458422526,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\r\n * TRACE Module designed to inject tracing code into objects and functions at run-time.\r\n * @param log {function} Writes messages to user defined destination. Defaults to console or alert.\r\n * @return this {Object||Function} Object or function to which tracing was added.\r\n */\r\nvar TRACE = function(log) {\r\n    // Don't munge the global env\r\n    if(this === window || this === document) return;\r\n    var out = log||(window.console?console.log:alert);\r\n    // Cache to store original methods/functions\r\n    var cache = {};\r\n    \r\n    dumpCache = function() {\r\n        out('Begin dumping cached methods...');\r\n        for(var p in cache) {\r\n            LOG.debug(p);\r\n        }\r\n        out('End dumping cached methods...');\r\n    };\r\n    \r\n    // Add tracing\r\n    var typ = typeof this;\r\n    if(typ === 'object') {\r\n        for(var p in this) {\r\n            if(typeof this[p] === 'function') {\r\n                if(!this[p].trace_enabled) {\r\n                    cache[p] = this[p];\r\n                    var newMethod = wrap(this,p);\r\n                    newMethod.prototype = cache[p].prototype;\r\n                    this[p] = newMethod;\r\n                    //Flag this method as traced\r\n                    this[p].trace_enabled = true;\r\n                }\r\n            } else if(typeof this[p] === 'object') {\r\n                //Trace into sub-objects\r\n                TRACE.apply(this[p],arguments);\r\n            }\r\n        }\r\n    } else if(typ === 'function') {\r\n        var funcName = this.toString().substring(this.toString().indexOf(\" \")+1,this.toString().indexOf(\"(\"));\r\n        cache[funcName] = this;\r\n        var newMethod = wrap(this,funcName);\r\n        newMethod.prototype = cache[funcName].prototype;\r\n        window[funcName] = newMethod;\r\n        this.trace_enabled = true;\r\n    }\r\n    \r\n    /**\r\n     * wrap Helper function to create a closure around the execution of the \r\n     * original method/function.\r\n     * @param context {Object} Execution context\r\n     * @param methodName {String} Name of cached method.\r\n     * @return {undefined}\r\n     */\r\n    function wrap(context,methodName) {\r\n        return function() {\r\n            //Log the arguments\r\n            var args = [];\r\n            for(var i=0;i<arguments.length;i++) {\r\n                if(typeof arguments[i] === 'string' || typeof arguments[i] === 'number') {\r\n                    args[args.length] = arguments[i];\r\n                } else {\r\n                    if(arguments[i].constructor === Array) {\r\n                        args[args.length] = 'array[' + arguments[i].length + ']';\r\n                    } else {\r\n                        args[args.length] = typeof arguments[i];\r\n                    }\r\n                }\r\n            }\r\n            //Log and execute the cached method\r\n            out('Entering ' + methodName + '(' + args.join(',') + ')');\r\n            var start = new Date();\r\n            try {\r\n                cache[methodName].apply(this,arguments);\r\n            } catch(e) {\r\n                out('Error: ' + e.message);\r\n            }\r\n            var stop = new Date();\r\n            out('Exiting ' + methodName + '(' + (stop - start) + ' ms)');\r\n        };\r\n    };\r\n    //dumpCache();\r\n    return this;\r\n}; //end TRACE\r\n"]],"start1":0,"start2":0,"length1":0,"length2":3232}]],"length":3232}
{"contributors":[],"silentsave":false,"ts":1351458536941,"patch":[[{"diffs":[[0,"/\r\nvar T"],[-1,"RACE"],[1,"race"],[0," = funct"]],"start1":280,"start2":280,"length1":20,"length2":20},{"diffs":[[0,"    "],[-1,"LOG.debug"],[1,"out"],[0,"(p);"]],"start1":652,"start2":652,"length1":17,"length2":11}]],"length":3226,"saved":false}
{"ts":1351458635949,"patch":[[{"diffs":[[0,"       T"],[-1,"RACE"],[1,"race"],[0,".apply(t"]],"start1":1360,"start2":1360,"length1":20,"length2":20}]],"length":3226,"saved":false}
{"ts":1351458877168,"patch":[[{"diffs":[[0,"            "],[-1,"out"],[1,"console.log"],[0,"('Entering '"]],"start1":2768,"start2":2768,"length1":27,"length2":35},{"diffs":[[0,"        "],[-1,"out"],[1,"console.log"],[0,"('Exitin"]],"start1":3089,"start2":3089,"length1":19,"length2":27}]],"length":3242,"saved":false}
{"ts":1351459315112,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"    dumpCache = function() {\r\n        out('Begin dumping cached methods...');\r\n        for(var p in cache) {\r\n            out(p);\r\n        }\r\n        out('End dumping cached methods...');\r\n    };\r\n    \r\n"],[0,"    "]],"start1":530,"start2":530,"length1":211,"length2":8},{"diffs":[[0,"};\r\n"],[-1,"    //dumpCache();\r\n"],[0,"    "]],"start1":2981,"start2":2981,"length1":28,"length2":8},{"diffs":[[0," //end T"],[-1,"RACE"],[1,"race"],[0,"\r\n"]],"start1":3005,"start2":3005,"length1":14,"length2":14}]],"length":3019,"saved":false}
{"ts":1351459400145,"patch":[[{"diffs":[[0,"        "],[-1,"console.log"],[1,"out"],[0,"('Enteri"]],"start1":2569,"start2":2569,"length1":27,"length2":19},{"diffs":[[0,"        "],[-1,"console.log"],[1,"out"],[0,"('Exitin"]],"start1":2878,"start2":2878,"length1":27,"length2":19}]],"length":3003,"saved":false}
{"ts":1351459635456,"patch":[[{"diffs":[[0,".console"],[1,".log"],[0,"?console"]],"start1":427,"start2":427,"length1":16,"length2":20}]],"length":3007,"saved":false}
{"ts":1351459702264,"patch":[[{"diffs":[[0,"og:alert);\r\n"],[1,"    console.log(typeof log);\r\n"],[0,"    // Cache"]],"start1":449,"start2":449,"length1":24,"length2":54}]],"length":3037,"saved":false}
{"ts":1351459726992,"patch":[[{"diffs":[[0,"(typeof "],[-1,"log"],[1,"out"],[0,");\r\n    "]],"start1":476,"start2":476,"length1":19,"length2":19}]],"length":3037,"saved":false}
{"ts":1351459754620,"patch":[[{"diffs":[[0,"peof out);\r\n"],[1,"    out(\"test\");\r\n"],[0,"    // Cache"]],"start1":479,"start2":479,"length1":24,"length2":42}]],"length":3055,"saved":false}
{"ts":1351459853098,"patch":[[{"diffs":[[0,"unction("],[-1,"log"],[1,"out"],[0,") {\r\n   "]],"start1":296,"start2":296,"length1":19,"length2":19},{"diffs":[[0,"n;\r\n"],[-1,"    var out = log||(window.console.log?console.log:alert);\r\n    console.log(typeof out);\r\n"],[0,"    "]],"start1":397,"start2":397,"length1":98,"length2":8},{"diffs":[[0,"racing\r\n"],[-1,""],[0,"    var "]],"start1":508,"start2":508,"length1":16,"length2":16},{"diffs":[[0,"peof this;\r\n"],[1,"    var newMethod;\r\n"],[0,"    if(typ ="]],"start1":532,"start2":532,"length1":24,"length2":44},{"diffs":[[0," this;\r\n        "],[-1,"var "],[0,"newMethod = wrap"]],"start1":1379,"start2":1379,"length1":36,"length2":32}]],"length":2981,"saved":false}
{"ts":1351459883497,"patch":[[{"diffs":[[0,"            "],[-1,"var "],[0,"newMethod = "]],"start1":766,"start2":766,"length1":28,"length2":24},{"diffs":[[0,"   };\r\n    }"],[-1,";"],[1,"\r\n    "],[0,"\r\n    return"]],"start1":2928,"start2":2928,"length1":25,"length2":30}]],"length":2982,"saved":false}
{"ts":1351459957378,"patch":[[{"diffs":[[0,"n;\r\n"],[-1,"    out(\"test\");\r\n"],[0,"    "]],"start1":397,"start2":397,"length1":26,"length2":8}]],"length":2964,"saved":false}
